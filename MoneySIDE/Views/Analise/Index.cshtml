@{
    ViewData["Title"] = "";
    var analises = ViewBag.Analises as List<Analise>;
    var dataLimiteUmMes = DateTime.Now.AddMonths(-1);
    var dataLimiteSeisMeses = DateTime.Now.AddMonths(-6);
    var dataLimiteUmAno = DateTime.Now.AddYears(-1); // Data limite para 1 ano

    // Filtrando análises do último mês
    var analisesFiltradas = analises?.Where(a => a.Data >= dataLimiteUmMes).ToList();

    // Agrupando valores por data do último mês
    var valoresPorData = analisesFiltradas?.GroupBy(a => a.Data.Date)
        .Select(g => new
        {
            Data = g.Key,
            SomaValores = g.Sum(a => a.Valor)
        }).ToList();

    // Filtrando análises dos últimos 6 meses
    var analisesSeisMeses = analises?.Where(a => a.Data >= dataLimiteSeisMeses).ToList();

    // Agrupando valores por mês para os últimos 6 meses
    var valoresPorMes = analisesSeisMeses?.GroupBy(a => new { a.Data.Year, a.Data.Month })
        .Select(g => new
        {
            Mes = new DateTime(g.Key.Year, g.Key.Month, 1),
            SomaValores = g.Sum(a => a.Valor)
        }).ToList();

    // Filtrando análises dos últimos 12 meses
    var analisesUmAno = analises?.Where(a => a.Data >= dataLimiteUmAno).ToList();

    // Agrupando valores por mês para os últimos 12 meses
    var valoresPorAno = analisesUmAno?.GroupBy(a => new { a.Data.Year, a.Data.Month })
        .Select(g => new
        {
            Mes = new DateTime(g.Key.Year, g.Key.Month, 1),
            SomaValores = g.Sum(a => a.Valor)
        }).ToList();
}

<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" type="text/css" href="~/css/scanner.css" />
    <style>
        .grafico-container {
            display: flex; /* Usar flexbox para alinhar os gráficos */
            flex-direction: column; /* Alinha os gráficos em coluna (um embaixo do outro) */
            margin: 20px 0; /* Espaçamento entre os gráficos */
            flex-wrap: wrap; /* Permitir que os gráficos se movam para a linha seguinte em telas menores */
            position: relative; /* Adicione posição relativa */
            z-index: 1; /* Defina um z-index alto */
        }

        .grafico-item {
            flex: 1; /* Cada gráfico ocupa o mesmo espaço */
            min-width: 400px; /* Largura mínima para os gráficos */
            max-width: 800px; /* Largura máxima para os gráficos */
            margin: 10px auto; /* Margem entre os gráficos, centralizado */
            text-align: center; /* Centraliza o texto */
            border: 1px solid #ccc; /* Borda para o contêiner do gráfico */
            padding: 10px; /* Espaçamento interno */
            border-radius: 8px; /* Bordas arredondadas */
            background-color: #f9f9f9; /* Cor de fundo leve */
            position: relative; /* Se houver uma tabela, também adicione isso */
            z-index: 2; /* Ou um valor maior, se necessário */
        }

            .grafico-item:hover {
                opacity: 1; /* Certifique-se de que a opacidade seja mantida */
            }


        canvas {
            width: 100% !important; /* Largura do canvas ocupa 100% do contêiner */
            height: 600px !important; /* Altura do canvas fixada */
        }
    </style>
    <title>@ViewData["Title"]</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="container">
        <h1>@ViewData["Title"]</h1>

        <div class="grafico-container">
            @if (analises != null && analises.Any())
            {
                <div class="grafico-item">
                    <h2>Projeção Geral</h2>
                    <canvas id="meuGrafico"></canvas>
                    <script>
                        var ctx = document.getElementById('meuGrafico').getContext('2d');
                        var meuGrafico = new Chart(ctx, {
                            type: 'bar',
                            data: {
                                labels: @Html.Raw(Json.Serialize(analises.Select(a => "Data: " + a.Data.ToString("dd/MM/yyyy") + "\nRemetente: " + a.Remetente + "\nDestinatário: " + a.Destinatario))),
                                datasets: [{
                                    label: 'Valores',
                                    data: @Html.Raw(Json.Serialize(analises.Select(a => a.Valor))),
                                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                    borderColor: 'rgba(75, 192, 192, 1)',
                                    borderWidth: 1
                                }]
                            },
                            options: {
                                scales: {
                                    y: {
                                        beginAtZero: true
                                    },
                                    x: {
                                        display: false
                                    }
                                },
                                tooltips: {
                                    callbacks: {
                                        title: function (tooltipItems) {
                                            var index = tooltipItems[0].index;
                                            var analise = @Html.Raw(Json.Serialize(analises));
                                        },
                                        label: function (tooltipItem) {
                                            return 'Valor: ' + tooltipItem.yLabel;
                                        }
                                    }
                                }
                            }
                        });
                    </script>
                </div>
            }
            else
            {
                <div class="grafico-item"><p>Nenhum dado disponível para gerar o gráfico.</p></div>
            }

            @if (valoresPorData != null && valoresPorData.Any())
            {
                <div class="grafico-item">
                    <h2>Projeção de um Mês</h2>
                    <canvas id="graficoPorData"></canvas>
                    <script>
                        var ctx2 = document.getElementById('graficoPorData').getContext('2d');

                        var labels = @Html.Raw(Json.Serialize(valoresPorData.Select(v => v.Data.ToString("dd/MM/yyyy"))));
                        var dataValues = @Html.Raw(Json.Serialize(valoresPorData.Select(v => v.SomaValores)));

                        var graficoPorData = new Chart(ctx2, {
                            type: 'line',
                            data: {
                                labels: labels,
                                datasets: [{
                                    label: 'Soma dos Valores por Data',
                                    data: dataValues,
                                    backgroundColor: 'rgba(153, 102, 255, 0.2)',
                                    borderColor: 'rgba(153, 102, 255, 1)',
                                    borderWidth: 2,
                                    pointRadius: 7 // Aumenta o tamanho dos pontos
                                }]
                            },
                            options: {
                                scales: {
                                    y: {
                                        beginAtZero: true
                                    }
                                }
                            }
                        });
                    </script>
                </div>
            }
            else
            {
                <div class="grafico-item"><p>Nenhum dado disponível para gerar o gráfico por data (último mês).</p></div>
            }

            @if (valoresPorMes != null && valoresPorMes.Any())
            {
                <div class="grafico-item">
                    <h2>Projeção de 6 Meses</h2>
                    <canvas id="graficoSeisMeses"></canvas>
                    <script>
                        var ctx3 = document.getElementById('graficoSeisMeses').getContext('2d');

                        var labelsSeisMeses = @Html.Raw(Json.Serialize(valoresPorMes.Select(v => v.Mes.ToString("MMM yyyy"))));
                        var dataValuesSeisMeses = @Html.Raw(Json.Serialize(valoresPorMes.Select(v => v.SomaValores)));

                        var graficoSeisMeses = new Chart(ctx3, {
                            type: 'line',
                            data: {
                                labels: labelsSeisMeses,
                                datasets: [{
                                    label: 'Soma dos Valores por Mês',
                                    data: dataValuesSeisMeses,
                                    backgroundColor: 'rgba(255, 159, 64, 0.2)',
                                    borderColor: 'rgba(255, 159, 64, 1)',
                                    borderWidth: 2,
                                    pointRadius: 5, // Aumenta o tamanho dos pontos
                                    fill: false
                                }]
                            },
                            options: {
                                scales: {
                                    y: {
                                        beginAtZero: true
                                    }
                                }
                            }
                        });
                    </script>
                </div>
            }
            else
            {
                <div class="grafico-item"><p>Nenhum dado disponível para gerar o gráfico por mês (últimos 6 meses).</p></div>
            }

            @if (valoresPorAno != null && valoresPorAno.Any())
            {
                <div class="grafico-item">
                    <h2>Projeção de 1 Ano</h2>
                    <canvas id="graficoUmAno"></canvas>
                    <script>
                        var ctx4 = document.getElementById('graficoUmAno').getContext('2d');

                        var labelsUmAno = @Html.Raw(Json.Serialize(valoresPorAno.Select(v => v.Mes.ToString("MMM yyyy"))));
                        var dataValuesUmAno = @Html.Raw(Json.Serialize(valoresPorAno.Select(v => v.SomaValores)));

                        var graficoUmAno = new Chart(ctx4, {
                            type: 'line',
                            data: {
                                labels: labelsUmAno,
                                datasets: [{
                                    label: 'Soma dos Valores por Mês',
                                    data: dataValuesUmAno,
                                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                                    borderColor: 'rgba(54, 162, 235, 1)',
                                    borderWidth: 2,
                                    pointRadius: 5, // Aumenta o tamanho dos pontos
                                    fill: false
                                }]
                            },
                            options: {
                                scales: {
                                    y: {
                                        beginAtZero: true
                                    }
                                }
                            }
                        });
                    </script>
                </div>
            }
            else
            {
                <div class="grafico-item"><p>Nenhum dado disponível para gerar o gráfico por mês (últimos 12 meses).</p></div>
            }
        </div>
    </div>
</body>
</html>